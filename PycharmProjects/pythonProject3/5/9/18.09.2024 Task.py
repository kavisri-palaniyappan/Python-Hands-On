# Unique Substring
# main_string = input("Enter the input string:")
# unique_substrings = set()
#
# for i in range(len(main_string)):
#     for j in range(i + 1, len(main_string) + 1):
#         unique_substrings.add(main_string[i:j])
#
# count = len(unique_substrings)
# print('Total unique substrings:' ,count)

# def rearrange_vowels_descending(s):
#     vowels="aeiouAEIOU"
#     extraxted_vowels=[char for char in s if char in vowels]
#     extraxted_vowels.sort(reverse=True)
#     vowel_iter=iter(extraxted_vowels)
#     result=''.join(next(vowel_iter) if char in vowels else char for char in s)
#     return result
# input_string=input("Enter the input string")
# output_string=rearrange_vowels_descending(input_string)
# print("Rearranged string:",output_string)
# PERMUTATIONS
# def permute(lst):
#     if len(lst) == 0:
#         return []
#     if len(lst) == 1:
#         return [lst]
#     result = []
#     for i in range(len(lst)):
#         # Current element to be permuted
#         current_element = lst[i]
#         # Remaining elements after removing current element
#         remaining_elements = lst[:i] + lst[i+1:]
#         # Recursively generate permutations of remaining elements
#         for p in permute(remaining_elements):
#             result.append([current_element] + p)
#     return result
# input_list = input("Enter the list of elements separated by space: ").split()
# try:
#     input_list = [int(x) for x in input_list]
# except ValueError:
#     pass
# permutations = permute(input_list)
# print(permutations)
# REVERSE
# def reverse_list(lst):
#     if len(lst) == 0 or len(lst) == 1:
#         return lst
#     else:
#         return [lst[-1]] + reverse_list(lst[:-1])
# input_transactions = input("Enter the list of transactions separated by space: ").split()
# try:
#     input_transactions = [int(x) for x in input_transactions]
# except ValueError:
#     pass
# reversed_transactions = reverse_list(input_transactions)
# print(reversed_transactions)
# NESTED LIST
# def sum_expenses(expenses):
#     total = 0
#     for item in expenses:
#         if isinstance(item, int):
#             total += item
#         elif isinstance(item, list):
#             total += sum_expenses(item)
#     return total
# input_expenses = eval(input("Enter the nested list of expenses (e.g., [100, [200, 50], 300]): "))
# total_sum = sum_expenses(input_expenses)
# print("Total sum of expenses:", total_sum)
# PYTHON DIAMOND PROGRAM
# print("Enter no.of rows:")
# n=int(input())
# for i in range(1,n+1,1):
#     for j in range(1,n+1-i):
#         print(" ",end="")
#     for k in range(1,i+1):
#         print("*",end=" ")
#     print()
# for i in range(n-1,0,-1):
#     for j in range(1,n+1-i):
#         print(" ",end="")
#     for k in range(1,i+1):
#         print("*",end=" ")
#     print()

rows = int(input("Enter the number of rows: "))
for i in range(1, rows + 1):
    if i % 2 != 0:
        print('*' * i)
    else:
        print(''.join(str(x) for x in range(1, i + 1)))












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































